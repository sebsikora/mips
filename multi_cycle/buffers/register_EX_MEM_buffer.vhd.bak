library ieee;
use ieee.std_logic_1164.all;
use work.all;

entity register_ID_EX_buffer is
	port (program_counter_in:						in std_logic_vector(31 downto 0);
			register_read_data_1_in:				in std_logic_vector(31 downto 0);
			register_read_data_2_in:				in std_logic_vector(31 downto 0);
			sign_extended_address_offset_in:		in std_logic_vector(31 downto 0);
			register_write_destination_1_in:		in std_logic_vector(4 downto 0);
			register_write_destination_2_in:		in std_logic_vector(4 downto 0);
			program_counter_out:						out std_logic_vector(31 downto 0);
			register_read_data_1_out:				out std_logic_vector(31 downto 0);
			register_read_data_2_out:				out std_logic_vector(31 downto 0);
			sign_extended_address_offset_out:	out std_logic_vector(31 downto 0);
			register_write_destination_1_out:	out std_logic_vector(4 downto 0);
			register_write_destination_2_out:	out std_logic_vector(4 downto 0);
			load:											in std_logic;
			stall:										in std_logic;
			bubble:										in std_logic;
			clk:											in std_logic
	);
end register_ID_EX_buffer;

architecture rtl of register_ID_EX_buffer is
	component register_32 is
		port (data_in:				in std_logic_vector(31 downto 0);
				data_out:			out std_logic_vector(31 downto 0);
				load:					in std_logic;
				clk:					in std_logic
		);
	end component;
	
	component register_5 is
		port (data_in:				in std_logic_vector(4 downto 0);
				data_out:			out std_logic_vector(4 downto 0);
				load:					in std_logic;
				clk:					in std_logic
		);
	end component;
	
	signal clk_line:				std_logic;
	signal load_line:				std_logic;
	signal stall_line:			std_logic;
	signal bubble_line:			std_logic;
	
begin
	
	clk_line <= clk;
	load_line <= load;
	stall_line <= stall;
	bubble_line <= bubble;
	
	program_counter_buffer:				register_32 port map (data_in => program_counter_in, data_out => program_counter_out, load => load_line, clock => clock_line);
	register_read_data_1:				register_32 port map (data_in => register_read_data_1_in, data_out => register_read_data_1_out, load => load_line, clock => clock_line);
	register_read_data_2:				register_32 port map (data_in => register_read_data_2_in, data_out => register_read_data_2_out, load => load_line, clock => clock_line);
	sign_extended_address_offset:		register_32 port map (data_in => register_read_data_2_in, data_out => register_read_data_2_out, load => load_line, clock => clock_line);
	register_write_destination_1:		register_5 	port map (data_in => register_write_destination_1_in, data_out => register_write_destination_1_out, load => load_line, clock => clock_line);
	register_write_destination_2:		register_5 	port map (data_in => register_write_destination_2_in, data_out => register_write_destination_2_out, load => load_line, clock => clock_line);
	
end rtl;