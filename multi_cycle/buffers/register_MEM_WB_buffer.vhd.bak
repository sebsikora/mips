library ieee;
use ieee.std_logic_1164.all;
use work.all;

entity register_ID_EX_buffer is
	port (alu_result_in:								in std_logic_vector(31 downto 0);
			register_read_data_2_in:				in std_logic_vector(31 downto 0);
			register_write_destination_in:		in std_logic_vector(4 downto 0);
			alu_zero_flag_in:							in std_logic;
			alu_result_out:							out std_logic_vector(31 downto 0);
			register_read_data_2_out:				out std_logic_vector(31 downto 0);
			register_write_destination_out:		out std_logic_vector(4 downto 0);
			alu_zero_flag_out:						out std_logic;
			load:											in std_logic;
			stall:										in std_logic;
			bubble:										in std_logic;
			clk:											in std_logic
	);
end register_ID_EX_buffer;

architecture rtl of register_ID_EX_buffer is
	component register_32 is
		port (data_in:				in std_logic_vector(31 downto 0);
				data_out:			out std_logic_vector(31 downto 0);
				load:					in std_logic;
				clk:					in std_logic
		);
	end component;
	
	component register_8 is
		port (data_in:				in std_logic_vector(7 downto 0);
				data_out:			out std_logic_vector(7 downto 0);
				load:					in std_logic;
				clk:					in std_logic
		);
	end component;
	
	signal clk_line:				std_logic;
	signal load_line:				std_logic;
	signal stall_line:			std_logic;
	signal bubble_line:			std_logic;
	
	signal register_8_input:	std_logic_vector(7 downto 0);
	signal register_8_output:	std_logic_vector(7 downto 0);
	
begin
	
	clk_line <= clk;
	load_line <= load;
	stall_line <= stall;
	bubble_line <= bubble;
	
	register_8_input(4 downto 0) <= register_write_destination_in(4 downto 0);
	register_8_input(5) <= alu_zero_flag_in;
	register_8_input(7 downto 6) <= '0';
	
	alu_zero_flag_out <= register_8_output(5);
	register_write_destination_out(4 downto 0) <= register_8_output(4 downto 0);
	
	alu_result:														register_32 port map (data_in => alu_result_in, data_out => alu_result_out, load => load_line, clock => clock_line);
	register_read_data_2:										register_32 port map (data_in => register_read_data_2_in, data_out => register_read_data_2_out, load => load_line, clock => clock_line);
	zero_flag_and_register_write_destination:				register_8 	port map (data_in => register_8_input, data_out => register_8_output, load => load_line, clock => clock_line);
	
end rtl;